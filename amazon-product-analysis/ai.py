from ollama import chat
from pydantic import BaseModel, conlist
import scraper
import analysis


class product_desc(BaseModel):
    """
    A Pydantic model representing a single product description.

    Attributes:
        title (str): The title of the product.
        description (str): The description of the product.
        price (str): The price of the product as a string (e.g., "$19.99").
        seo (str): SEO-friendly keywords or phrases for the product.
    """
    title: str
    description: str
    price: str
    seo: str


class product_desc_list(BaseModel):
    """
    A Pydantic model representing a list of product descriptions.

    Attributes:
        products_desc_list (list[product_desc]): A list of product descriptions, with
                                                a maximum length of 5.
    """
    products_desc_list: conlist(product_desc, max_length=5)


def generate(prompt: str, model: str = 'llama3.1:8b') -> str:
    """
    Generate a response using the specified AI model based on a prompt.

    This function sends a user-provided prompt to the specified AI model and returns
    the generated response.

    Args:
        prompt (str): The input prompt to be sent to the AI model.
        model (str, optional): The AI model to use for generating the response. Defaults to "llama3.1:8b".

    Returns:
        str: The content of the response generated by the AI model.

    Example:
        >>> response = generate("Create an Amazon product listing for a coffee grinder.")
        >>> print(response)
        "Here is an optimized product listing for your coffee grinder..."
    """
    response = chat(
        model=model,
        messages=[{'role': 'user', 'content': prompt}]
    )
    return response.message.content


def create_prompt(title, description):
    """
    Create a detailed prompt for generating an Amazon product listing.

    This function uses product details provided by the user, along with insights
    from similar products, to generate a comprehensive prompt for the AI model.

    Args:
        title (str): The title of the product.
        description (str): The description of the product.

    Returns:
        str: A well-structured prompt incorporating product details, analysis of similar
            products, and instructions for the AI to generate an optimized product listing.

    Example:
        >>> prompt = create_prompt("coffee grinder", "sleek black coffee grinder with multiple grind settings")
        >>> print(prompt)
        "You are a product listing assistant specializing in creating Amazon product titles..."
    """
    # Scrap similar product information
    productList = scraper.extract_product_info(title)
    titles, ratings, prices = scraper.seperate_product_info(productList)

    # Analyze title stats
    char_mean, char_median, char_mode = analysis.description_charSize(titles)
    word_mean, word_median, word_mode = analysis.description_wordCount(titles)

    # Aanalyze price stats
    price_low, price_high, price_mean, price_median, price_mode = analysis.price_stats(
        prices)
    # Generate the prompt using concatenation
    prompt = (
        "You are a product listing assistant specializing in creating Amazon product titles, descriptions, prices, and SEO keywords. "
        + "Here are the details of the product:\n\n"
        + "Product Title: " + title + "\n"
        + "Product Description: " + description + "\n\n"
        + "Insights from similar products:\n"
        + "- The average product title length is " +
        str(char_mean) + " characters, with a median of " +
        str(char_median) + " characters. "
        + "The most common title length is " +
        str(char_mode[0]) + " characters.\n"
        + "- The average word count in product titles is " +
        str(word_mean) + " words, with a median of " +
        str(word_median) + " words. "
        + "The most common word count is " + str(word_mode[0]) + " words.\n"
        + "- Price range: $" + str(round(price_low, 2)) + " to $" + str(round(price_high, 2)) + ", with an average price of $" +
        str(round(price_mean, 2)) +
        ", with a median of price of $" + str(price_median) + ". "
        + "The most common price is " + str(price_mode[0]) + ".\n\n"
        + "Your task is to generate a product listing for Amazon based on this data. Create:\n"
        + "1. A compelling product title that is optimized for both readability and SEO.\n"
        + "2. A detailed product description that highlights key features and benefits of the product.\n"
        + "3. A competitive price within the given range, considering the average and median prices.\n"
        + "4. A list of SEO-friendly keywords or phrases (separated by commas) that align with the product and similar listings.\n\n"
        + "Return a list of 5 distinct product descriptions in JSON format.\n"
        + "Ensure the amazon title is concise but informative, the description is persuasive, the price is realistic, and the SEO keywords are relevant."
    )

    return prompt


def suggestion_gen(title, description):
    """
    Generate product suggestions using the Amazon Product Description Generator.

    This function uses a title and description to generate a detailed prompt, sends
    it to the AI model, and returns the response in JSON format.

    Args:
        title (str): The title of the product.
        description (str): A brief description of the product.

    Returns:
        ChatResponse: The response generated by the AI model in JSON format, validated
                    against the product_desc_list schema.

    Example:
        >>> response = suggestion_gen("coffee grinder", "sleek black coffee grinder with multiple grind settings")
        >>> print(response)
        {
            "products_desc_list": [
                {
                    "title": "...",
                    "description": "...",
                    "price": "...",
                    "seo": "..."
                },
                ...
            ]
        }
    """
    # Create prompt with given information
    prompt = create_prompt(title, description)

    response = chat(
        model="llama3.1:8b",
        messages=[{'role': 'user', 'content': prompt}],
        format=product_desc_list.model_json_schema(),
        options={'temperature': 0}
    )

    return response


def print_response(response):
    """
    Print the response content generated by the suggestion generator.

    This function validates the JSON response against the product_desc_list schema
    and prints the details of each product description in a human-readable format.

    Args:
        response (ChatResponse): The response generated by the AI model.

    Returns:
        None

    Example:
        >>> response = suggestion_gen("coffee grinder", "sleek black coffee grinder with multiple grind settings")
        >>> print_response(response)
        Title: Sleek Black Coffee Grinder
        Description: Elevate your coffee game with our sleek black coffee grinder...
        Price: $49.99
        SEO: coffee grinder, black coffee grinder, grind settings, sleek design
        ----------------------------------------
    """
    products_desc = product_desc_list.model_validate_json(
        response.message.content)
    for product in products_desc.products_desc_list:
        print(f"Title: {product.title}")
        print(f"Description: {product.description}")
        print(f"Price: {product.price}")
        print(f"SEO: {product.seo}")
        print("-" * 40)
